// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class TokenPaymasterOperation extends ethereum.Event {
  get params(): TokenPaymasterOperation__Params {
    return new TokenPaymasterOperation__Params(this);
  }
}

export class TokenPaymasterOperation__Params {
  _event: TokenPaymasterOperation;

  constructor(event: TokenPaymasterOperation) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalCharge(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get oracleAggregator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get priceMarkup(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get userOpHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get exchangeRate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get priceSource(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class TokenPaymentDue extends ethereum.Event {
  get params(): TokenPaymentDue__Params {
    return new TokenPaymentDue__Params(this);
  }
}

export class TokenPaymentDue__Params {
  _event: TokenPaymentDue;

  constructor(event: TokenPaymentDue) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get charge(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BiconomyTokenPaymaster extends ethereum.SmartContract {
  static bind(address: Address): BiconomyTokenPaymaster {
    return new BiconomyTokenPaymaster("BiconomyTokenPaymaster", address);
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _entryPoint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _verifyingSigner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
