// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class UserOperation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserOperation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserOperation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserOperation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserOperation | null {
    return changetype<UserOperation | null>(
      store.get_in_block("UserOperation", id),
    );
  }

  static load(id: string): UserOperation | null {
    return changetype<UserOperation | null>(store.get("UserOperation", id));
  }

  get id(): i64 {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set id(value: i64) {
    this.set("id", Value.fromI64(value));
  }

  get timestamp(): i64 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toTimestamp();
    }
  }

  set timestamp(value: i64) {
    this.set("timestamp", Value.fromTimestamp(value));
  }

  get userOpHash(): Bytes {
    let value = this.get("userOpHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userOpHash(value: Bytes) {
    this.set("userOpHash", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get initCode(): Bytes | null {
    let value = this.get("initCode");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initCode(value: Bytes | null) {
    if (!value) {
      this.unset("initCode");
    } else {
      this.set("initCode", Value.fromBytes(<Bytes>value));
    }
  }

  get callData(): Bytes {
    let value = this.get("callData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set callData(value: Bytes) {
    this.set("callData", Value.fromBytes(value));
  }

  get callGasLimit(): BigInt {
    let value = this.get("callGasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set callGasLimit(value: BigInt) {
    this.set("callGasLimit", Value.fromBigInt(value));
  }

  get verificationGasLimit(): BigInt {
    let value = this.get("verificationGasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verificationGasLimit(value: BigInt) {
    this.set("verificationGasLimit", Value.fromBigInt(value));
  }

  get preVerificationGas(): BigInt {
    let value = this.get("preVerificationGas");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set preVerificationGas(value: BigInt) {
    this.set("preVerificationGas", Value.fromBigInt(value));
  }

  get maxFeePerGas(): BigInt {
    let value = this.get("maxFeePerGas");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxFeePerGas(value: BigInt) {
    this.set("maxFeePerGas", Value.fromBigInt(value));
  }

  get maxPriorityFeePerGas(): BigInt {
    let value = this.get("maxPriorityFeePerGas");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxPriorityFeePerGas(value: BigInt) {
    this.set("maxPriorityFeePerGas", Value.fromBigInt(value));
  }

  get paymasterAndData(): Bytes | null {
    let value = this.get("paymasterAndData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set paymasterAndData(value: Bytes | null) {
    if (!value) {
      this.unset("paymasterAndData");
    } else {
      this.set("paymasterAndData", Value.fromBytes(<Bytes>value));
    }
  }

  get signature(): Bytes {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }

  get entryPoint(): Bytes {
    let value = this.get("entryPoint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set entryPoint(value: Bytes) {
    this.set("entryPoint", Value.fromBytes(value));
  }

  get bundler(): Bytes | null {
    let value = this.get("bundler");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bundler(value: Bytes | null) {
    if (!value) {
      this.unset("bundler");
    } else {
      this.set("bundler", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get success(): boolean {
    let value = this.get("success");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get actualGasUsed(): BigInt | null {
    let value = this.get("actualGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set actualGasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("actualGasUsed");
    } else {
      this.set("actualGasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get actualGasCost(): BigInt | null {
    let value = this.get("actualGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set actualGasCost(value: BigInt | null) {
    if (!value) {
      this.unset("actualGasCost");
    } else {
      this.set("actualGasCost", Value.fromBigInt(<BigInt>value));
    }
  }

  get paymaster(): Bytes | null {
    let value = this.get("paymaster");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set paymaster(value: Bytes | null) {
    if (!value) {
      this.unset("paymaster");
    } else {
      this.set("paymaster", Value.fromBytes(<Bytes>value));
    }
  }

  get factory(): Bytes | null {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set factory(value: Bytes | null) {
    if (!value) {
      this.unset("factory");
    } else {
      this.set("factory", Value.fromBytes(<Bytes>value));
    }
  }

  get aggregator(): Bytes | null {
    let value = this.get("aggregator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set aggregator(value: Bytes | null) {
    if (!value) {
      this.unset("aggregator");
    } else {
      this.set("aggregator", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Account must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Account | null {
    return changetype<Account | null>(
      store.get_in_block("Account", id.toHexString()),
    );
  }

  static load(id: Bytes): Account | null {
    return changetype<Account | null>(store.get("Account", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get factory(): Bytes | null {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set factory(value: Bytes | null) {
    if (!value) {
      this.unset("factory");
    } else {
      this.set("factory", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get deployedAt(): BigInt {
    let value = this.get("deployedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deployedAt(value: BigInt) {
    this.set("deployedAt", Value.fromBigInt(value));
  }

  get deployedAtTimestamp(): BigInt {
    let value = this.get("deployedAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deployedAtTimestamp(value: BigInt) {
    this.set("deployedAtTimestamp", Value.fromBigInt(value));
  }

  get totalOperations(): BigInt {
    let value = this.get("totalOperations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOperations(value: BigInt) {
    this.set("totalOperations", Value.fromBigInt(value));
  }

  get totalGasUsed(): BigInt {
    let value = this.get("totalGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasUsed(value: BigInt) {
    this.set("totalGasUsed", Value.fromBigInt(value));
  }

  get totalGasCost(): BigInt {
    let value = this.get("totalGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasCost(value: BigInt) {
    this.set("totalGasCost", Value.fromBigInt(value));
  }

  get lastSeen(): BigInt {
    let value = this.get("lastSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeen(value: BigInt) {
    this.set("lastSeen", Value.fromBigInt(value));
  }

  get lastSeenTimestamp(): BigInt {
    let value = this.get("lastSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeenTimestamp(value: BigInt) {
    this.set("lastSeenTimestamp", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }
}

export class Factory extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Factory must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Factory", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Factory | null {
    return changetype<Factory | null>(
      store.get_in_block("Factory", id.toHexString()),
    );
  }

  static load(id: Bytes): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalAccountsCreated(): BigInt {
    let value = this.get("totalAccountsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAccountsCreated(value: BigInt) {
    this.set("totalAccountsCreated", Value.fromBigInt(value));
  }

  get totalGasUsed(): BigInt {
    let value = this.get("totalGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasUsed(value: BigInt) {
    this.set("totalGasUsed", Value.fromBigInt(value));
  }

  get firstSeen(): BigInt {
    let value = this.get("firstSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeen(value: BigInt) {
    this.set("firstSeen", Value.fromBigInt(value));
  }

  get lastSeen(): BigInt {
    let value = this.get("lastSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeen(value: BigInt) {
    this.set("lastSeen", Value.fromBigInt(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get lastSeenTimestamp(): BigInt {
    let value = this.get("lastSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeenTimestamp(value: BigInt) {
    this.set("lastSeenTimestamp", Value.fromBigInt(value));
  }
}

export class Bundler extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bundler entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Bundler must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Bundler", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Bundler | null {
    return changetype<Bundler | null>(
      store.get_in_block("Bundler", id.toHexString()),
    );
  }

  static load(id: Bytes): Bundler | null {
    return changetype<Bundler | null>(store.get("Bundler", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalBundles(): BigInt {
    let value = this.get("totalBundles");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBundles(value: BigInt) {
    this.set("totalBundles", Value.fromBigInt(value));
  }

  get totalUserOps(): BigInt {
    let value = this.get("totalUserOps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUserOps(value: BigInt) {
    this.set("totalUserOps", Value.fromBigInt(value));
  }

  get totalGasUsed(): BigInt {
    let value = this.get("totalGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasUsed(value: BigInt) {
    this.set("totalGasUsed", Value.fromBigInt(value));
  }

  get totalGasCost(): BigInt {
    let value = this.get("totalGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasCost(value: BigInt) {
    this.set("totalGasCost", Value.fromBigInt(value));
  }

  get firstSeen(): BigInt {
    let value = this.get("firstSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeen(value: BigInt) {
    this.set("firstSeen", Value.fromBigInt(value));
  }

  get lastSeen(): BigInt {
    let value = this.get("lastSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeen(value: BigInt) {
    this.set("lastSeen", Value.fromBigInt(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get lastSeenTimestamp(): BigInt {
    let value = this.get("lastSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeenTimestamp(value: BigInt) {
    this.set("lastSeenTimestamp", Value.fromBigInt(value));
  }
}

export class PaymasterFeeData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaymasterFeeData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PaymasterFeeData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PaymasterFeeData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PaymasterFeeData | null {
    return changetype<PaymasterFeeData | null>(
      store.get_in_block("PaymasterFeeData", id),
    );
  }

  static load(id: string): PaymasterFeeData | null {
    return changetype<PaymasterFeeData | null>(
      store.get("PaymasterFeeData", id),
    );
  }

  get id(): i64 {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set id(value: i64) {
    this.set("id", Value.fromI64(value));
  }

  get timestamp(): i64 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toTimestamp();
    }
  }

  set timestamp(value: i64) {
    this.set("timestamp", Value.fromTimestamp(value));
  }

  get paymaster(): Bytes {
    let value = this.get("paymaster");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paymaster(value: Bytes) {
    this.set("paymaster", Value.fromBytes(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasCost(): BigInt {
    let value = this.get("gasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasCost(value: BigInt) {
    this.set("gasCost", Value.fromBigInt(value));
  }

  get operationType(): string {
    let value = this.get("operationType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set operationType(value: string) {
    this.set("operationType", Value.fromString(value));
  }

  get success(): boolean {
    let value = this.get("success");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get userOpHash(): string | null {
    let value = this.get("userOpHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userOpHash(value: string | null) {
    if (!value) {
      this.unset("userOpHash");
    } else {
      this.set("userOpHash", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(<Bytes>value));
    }
  }

  get entryPoint(): Bytes {
    let value = this.get("entryPoint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set entryPoint(value: Bytes) {
    this.set("entryPoint", Value.fromBytes(value));
  }

  get bundler(): Bytes | null {
    let value = this.get("bundler");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bundler(value: Bytes | null) {
    if (!value) {
      this.unset("bundler");
    } else {
      this.set("bundler", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Paymaster extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Paymaster entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Paymaster must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Paymaster", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Paymaster | null {
    return changetype<Paymaster | null>(
      store.get_in_block("Paymaster", id.toHexString()),
    );
  }

  static load(id: Bytes): Paymaster | null {
    return changetype<Paymaster | null>(
      store.get("Paymaster", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalOperations(): BigInt {
    let value = this.get("totalOperations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOperations(value: BigInt) {
    this.set("totalOperations", Value.fromBigInt(value));
  }

  get totalGasCost(): BigInt {
    let value = this.get("totalGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasCost(value: BigInt) {
    this.set("totalGasCost", Value.fromBigInt(value));
  }

  get totalGasUsed(): BigInt {
    let value = this.get("totalGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasUsed(value: BigInt) {
    this.set("totalGasUsed", Value.fromBigInt(value));
  }

  get firstSeen(): BigInt {
    let value = this.get("firstSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeen(value: BigInt) {
    this.set("firstSeen", Value.fromBigInt(value));
  }

  get lastSeen(): BigInt {
    let value = this.get("lastSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeen(value: BigInt) {
    this.set("lastSeen", Value.fromBigInt(value));
  }

  get entryPoint(): Bytes {
    let value = this.get("entryPoint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set entryPoint(value: Bytes) {
    this.set("entryPoint", Value.fromBytes(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get lastSeenTimestamp(): BigInt {
    let value = this.get("lastSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeenTimestamp(value: BigInt) {
    this.set("lastSeenTimestamp", Value.fromBigInt(value));
  }

  get uniqueUsers(): BigInt {
    let value = this.get("uniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueUsers(value: BigInt) {
    this.set("uniqueUsers", Value.fromBigInt(value));
  }

  get successRate(): BigDecimal {
    let value = this.get("successRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set successRate(value: BigDecimal) {
    this.set("successRate", Value.fromBigDecimal(value));
  }
}

export class EntryPoint extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EntryPoint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EntryPoint must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EntryPoint", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EntryPoint | null {
    return changetype<EntryPoint | null>(
      store.get_in_block("EntryPoint", id.toHexString()),
    );
  }

  static load(id: Bytes): EntryPoint | null {
    return changetype<EntryPoint | null>(
      store.get("EntryPoint", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalOperations(): BigInt {
    let value = this.get("totalOperations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOperations(value: BigInt) {
    this.set("totalOperations", Value.fromBigInt(value));
  }

  get totalGasCost(): BigInt {
    let value = this.get("totalGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasCost(value: BigInt) {
    this.set("totalGasCost", Value.fromBigInt(value));
  }

  get firstSeen(): BigInt {
    let value = this.get("firstSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeen(value: BigInt) {
    this.set("firstSeen", Value.fromBigInt(value));
  }

  get lastSeen(): BigInt {
    let value = this.get("lastSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeen(value: BigInt) {
    this.set("lastSeen", Value.fromBigInt(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get lastSeenTimestamp(): BigInt {
    let value = this.get("lastSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeenTimestamp(value: BigInt) {
    this.set("lastSeenTimestamp", Value.fromBigInt(value));
  }

  get totalAccounts(): BigInt {
    let value = this.get("totalAccounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAccounts(value: BigInt) {
    this.set("totalAccounts", Value.fromBigInt(value));
  }

  get totalBundlers(): BigInt {
    let value = this.get("totalBundlers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBundlers(value: BigInt) {
    this.set("totalBundlers", Value.fromBigInt(value));
  }

  get totalPaymasters(): BigInt {
    let value = this.get("totalPaymasters");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPaymasters(value: BigInt) {
    this.set("totalPaymasters", Value.fromBigInt(value));
  }
}

export class TokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenTransfer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenTransfer | null {
    return changetype<TokenTransfer | null>(
      store.get_in_block("TokenTransfer", id),
    );
  }

  static load(id: string): TokenTransfer | null {
    return changetype<TokenTransfer | null>(store.get("TokenTransfer", id));
  }

  get id(): i64 {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set id(value: i64) {
    this.set("id", Value.fromI64(value));
  }

  get timestamp(): i64 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toTimestamp();
    }
  }

  set timestamp(value: i64) {
    this.set("timestamp", Value.fromTimestamp(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get userOpHash(): Bytes | null {
    let value = this.get("userOpHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userOpHash(value: Bytes | null) {
    if (!value) {
      this.unset("userOpHash");
    } else {
      this.set("userOpHash", Value.fromBytes(<Bytes>value));
    }
  }

  get paymaster(): Bytes | null {
    let value = this.get("paymaster");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set paymaster(value: Bytes | null) {
    if (!value) {
      this.unset("paymaster");
    } else {
      this.set("paymaster", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AccountCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AccountCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountCreated | null {
    return changetype<AccountCreated | null>(
      store.get_in_block("AccountCreated", id),
    );
  }

  static load(id: string): AccountCreated | null {
    return changetype<AccountCreated | null>(store.get("AccountCreated", id));
  }

  get id(): i64 {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set id(value: i64) {
    this.set("id", Value.fromI64(value));
  }

  get timestamp(): i64 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toTimestamp();
    }
  }

  set timestamp(value: i64) {
    this.set("timestamp", Value.fromTimestamp(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get factory(): Bytes {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set factory(value: Bytes) {
    this.set("factory", Value.fromBytes(value));
  }

  get salt(): string | null {
    let value = this.get("salt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set salt(value: string | null) {
    if (!value) {
      this.unset("salt");
    } else {
      this.set("salt", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get userOpHash(): Bytes | null {
    let value = this.get("userOpHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userOpHash(value: Bytes | null) {
    if (!value) {
      this.unset("userOpHash");
    } else {
      this.set("userOpHash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bundle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bundle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Bundle", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get_in_block("Bundle", id));
  }

  static load(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get("Bundle", id));
  }

  get id(): i64 {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set id(value: i64) {
    this.set("id", Value.fromI64(value));
  }

  get timestamp(): i64 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toTimestamp();
    }
  }

  set timestamp(value: i64) {
    this.set("timestamp", Value.fromTimestamp(value));
  }

  get bundleHash(): Bytes {
    let value = this.get("bundleHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bundleHash(value: Bytes) {
    this.set("bundleHash", Value.fromBytes(value));
  }

  get bundler(): Bytes {
    let value = this.get("bundler");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bundler(value: Bytes) {
    this.set("bundler", Value.fromBytes(value));
  }

  get userOps(): Array<Bytes> {
    let value = this.get("userOps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set userOps(value: Array<Bytes>) {
    this.set("userOps", Value.fromBytesArray(value));
  }

  get totalGasUsed(): BigInt {
    let value = this.get("totalGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasUsed(value: BigInt) {
    this.set("totalGasUsed", Value.fromBigInt(value));
  }

  get totalGasCost(): BigInt {
    let value = this.get("totalGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasCost(value: BigInt) {
    this.set("totalGasCost", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get success(): boolean {
    let value = this.get("success");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }
}

export class Aggregator extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Aggregator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Aggregator must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Aggregator", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Aggregator | null {
    return changetype<Aggregator | null>(
      store.get_in_block("Aggregator", id.toHexString()),
    );
  }

  static load(id: Bytes): Aggregator | null {
    return changetype<Aggregator | null>(
      store.get("Aggregator", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalOperations(): BigInt {
    let value = this.get("totalOperations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOperations(value: BigInt) {
    this.set("totalOperations", Value.fromBigInt(value));
  }

  get totalGasUsed(): BigInt {
    let value = this.get("totalGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGasUsed(value: BigInt) {
    this.set("totalGasUsed", Value.fromBigInt(value));
  }

  get firstSeen(): BigInt {
    let value = this.get("firstSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeen(value: BigInt) {
    this.set("firstSeen", Value.fromBigInt(value));
  }

  get lastSeen(): BigInt {
    let value = this.get("lastSeen");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeen(value: BigInt) {
    this.set("lastSeen", Value.fromBigInt(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get lastSeenTimestamp(): BigInt {
    let value = this.get("lastSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSeenTimestamp(value: BigInt) {
    this.set("lastSeenTimestamp", Value.fromBigInt(value));
  }
}
